generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("AUTH_DATABASE_URL")
}

model User {
  id          String   @id @default(uuid())
  username    String   @unique
  email       String?  @unique
  phoneNumber String?  @unique
  password    String
  role        UserRole @default(USER)

  // Soft verification flags for both email & phone
  isEmailVerified Boolean @default(false)
  isPhoneVerified Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // One-to-many relationship with tokens (could be for verification or resets)
  credentialVerifications VerificationToken[]
}

/**
 * Stores hashed tokens for:
 * - email verification
 * - phone verification
 * - password reset
 * WHY HASHED:
 * Hashing the token ensures that if DB leaks, raw tokens can't be used.
 * (like bcrypt but here SHA-256 usually enough for non-password short-lived tokens).
 * isUsed:
 * Ensures tokens are one-time-use. Even if someone steals the raw value
 * after it’s used, it will be rejected.
 * expiresAt:
 * Lets you do automatic expiry checks or lazy deletions later.
 */
model VerificationToken {
  id        String           @id @default(uuid())
  userId    String
  tokenHash String           @unique
  type      VerificationType
  expiresAt DateTime
  isUsed    Boolean          @default(false)
  createdAt DateTime         @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Indexes for fast lookups by user or expiry (cleanup jobs, auth flows)
  @@index([userId])
  @@index([expiresAt])
  @@index([type])
}

/**
 * User roles to support RBAC (role-based access control).
 * WHY ENUM:
 * Keeps DB integrity — prevents typos in role assignment
 * like 'admni' or 'administrator'.
 */
enum UserRole {
  USER
  MODERATOR
  ANALYTICS
  ADMIN
  CREATOR
}

/**
 * Verification types for multi-purpose tokens.
 * EXAMPLES:
 * EMAIL         -> email confirmation link
 * PHONE         -> SMS code (future)
 * PASSWORD_RESET -> reset links
 */
enum VerificationType {
  EMAIL
  PHONE
  PASSWORD_RESET
}
